#include "sirius/defs.h"

#define S(mg, eg) {mg, eg}

constexpr PackedScore MATERIAL[6] = {S(  61,  131), S( 290,  441), S( 309,  451), S( 386,  804), S( 803, 1484), S(0, 0)};

constexpr PackedScore PSQT[6][64] = {
	{
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
		S(  66,   76), S(  33,   90), S(  27,   97), S(  53,   76), S(  64,   68), S(  32,   94), S(  31,  105), S(  64,   84),
		S(   9,   13), S(  -1,   42), S(  13,    4), S(  29,  -27), S(  17,  -20), S(   5,    0), S( -17,   34), S(  -4,   19),
		S(  14,    9), S(   5,   14), S(   7,   -9), S(  12,  -24), S(   0,  -22), S(  -4,   -9), S(  -9,   14), S( -13,   12),
		S(   8,    0), S(   3,   17), S(   6,  -14), S(  16,  -15), S(  10,  -14), S(  -3,   -8), S( -15,   15), S( -14,    2),
		S(   2,   -2), S(  11,   13), S(  16,   -3), S(  -1,    1), S(  -7,    0), S( -11,   -4), S( -23,   13), S( -26,    0),
		S(  14,   -2), S(  29,    7), S(  15,   -7), S(   7,    6), S(  -7,   -1), S(  -6,   -4), S( -14,   18), S( -17,    5),
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
	},
	{
		S( -76,  -96), S( -84,  -23), S( -29,  -17), S(   5,  -12), S( -34,    3), S( -62,    5), S(-106,    9), S( -89,  -54),
		S( -12,  -15), S(  23,   -1), S(  27,   -3), S(  10,    2), S(   9,    9), S(   3,   12), S(  -2,   17), S( -11,    3),
		S(  15,  -10), S(   5,    0), S(  51,  -11), S(  39,    6), S(  24,   14), S(  15,   13), S(   3,    7), S(  -7,    4),
		S(  32,    1), S(  31,    9), S(  44,   12), S(  31,   17), S(  28,   23), S(  32,   12), S(  21,    5), S(   9,   13),
		S(  12,   13), S(  18,   13), S(  26,   14), S(  21,   25), S(  26,   18), S(  20,   18), S(  22,    3), S(   6,    7),
		S(  12,   -1), S(  17,    0), S(  16,   -2), S(  13,   15), S(   6,   14), S(   2,    1), S(   3,   -4), S( -10,   -4),
		S(   5,    0), S(  12,   -7), S(   7,   -6), S(  10,    0), S(   4,    0), S(  -6,   -2), S(  -7,   -5), S( -19,   -5),
		S( -11,  -17), S( -13,   -6), S(  -5,  -10), S(   1,    2), S(  -5,   -1), S( -20,   -8), S( -15,  -11), S( -48,   -6),
	},
	{
		S( -45,  -15), S( -36,    5), S(  -8,   -2), S( -70,    8), S( -63,   16), S( -51,    2), S( -27,    8), S( -33,    8),
		S( -22,   -8), S( -45,    7), S(  -9,    2), S(  -1,   -1), S( -18,   10), S(   3,    0), S( -14,   -4), S(  -4,   -5),
		S(  14,   10), S(  12,    3), S(  28,    3), S(  14,    8), S(  21,    4), S(  -1,    0), S(   9,    8), S(   5,    3),
		S(  -8,    4), S(   8,    9), S(   9,   14), S(  20,   17), S(  23,   23), S(  19,    8), S(   6,   12), S(  -7,    5),
		S(  19,   -8), S(   4,    9), S(  10,   10), S(  11,   15), S(  21,   13), S(   2,   16), S(   1,    8), S(   2,    0),
		S(  21,  -11), S(  24,   -8), S(   6,   -6), S(  10,   11), S(   1,    8), S(   2,   -1), S(  17,    3), S(   2,   -6),
		S(  27,  -21), S(  19,  -26), S(  27,  -10), S(   5,   -3), S(  -1,    1), S(  11,  -16), S(   2,  -23), S(  14,  -11),
		S(  27,  -40), S(  15,  -16), S(  -9,    1), S(  15,   -5), S(   1,   -3), S(   0,    3), S(  13,   -4), S(   5,  -18),
	},
	{
		S(  12,    8), S( -29,   37), S( -15,   27), S( -11,   17), S( -29,   27), S( -24,   31), S( -14,   24), S(  -4,   19),
		S(  23,    3), S(  29,    9), S(  12,   15), S(   3,   15), S(  13,   18), S(   1,   29), S(  -3,   24), S(   1,   16),
		S(   5,    2), S(  31,    4), S(  17,    3), S(  22,    2), S(   1,   11), S(  -2,   20), S(  10,   15), S( -10,   18),
		S(   1,    6), S(   3,   12), S(  11,    7), S(  10,    1), S(   2,   10), S(   7,   14), S(   5,   14), S(  -7,   15),
		S( -10,    0), S(  11,    3), S( -10,    8), S(   7,    1), S(  -3,    3), S(  -7,    7), S(  -9,    7), S( -11,    6),
		S(   8,  -23), S(  22,  -25), S(   0,  -16), S(   4,  -17), S(  -8,  -10), S( -12,  -10), S( -10,  -11), S( -16,   -8),
		S(  -6,  -27), S(  23,  -37), S(   4,  -24), S(   4,  -23), S(  -3,  -19), S(  -3,  -16), S( -13,  -15), S( -16,  -20),
		S(  -6,  -34), S(  -5,  -16), S(   0,  -19), S(  10,  -26), S(   2,  -23), S(  -5,  -16), S(  -5,  -20), S(  -6,  -17),
	},
	{
		S( -10,   -5), S(  32,  -38), S( -13,   22), S(  -9,   11), S(  13,  -11), S( -23,   10), S( -40,    4), S( -29,    6),
		S(  39,   -3), S(   1,    9), S( -12,   29), S( -33,   50), S( -22,   37), S(  -4,    7), S(  -3,   -8), S(   6,   -6),
		S(  18,    1), S(  16,    3), S(   6,   21), S(  -8,   22), S(   3,   13), S(   7,   10), S(   9,  -11), S(  19,  -13),
		S(   9,   12), S(   5,   31), S(   9,    8), S( -10,   29), S(  -7,   28), S(   9,    4), S(   6,   15), S(   4,    7),
		S(  10,    7), S(  14,    9), S(   0,   15), S(   2,   24), S(  -5,   32), S(  -2,   21), S(   4,   16), S(   2,    8),
		S(  14,  -24), S(  12,   -9), S(   4,    4), S(  -5,   16), S(  -4,   13), S(  -2,   16), S(   9,   -6), S(  10,  -19),
		S(   5,  -40), S(   9,  -65), S(   7,  -39), S(   4,   -8), S(   4,   -3), S(   4,  -16), S(   3,  -20), S(   8,  -35),
		S(   5,  -43), S( -17,  -44), S( -20,  -21), S(  -4,  -20), S(  -4,  -12), S(  -6,  -12), S( -11,  -17), S( -11,  -14),
	},
	{
		S( -20,  -58), S( -16,    3), S( -57,    2), S( -45,   -1), S(   7,   -5), S(   7,   -5), S(   7,   -5), S(   7,   -5),
		S( -65,   33), S( -14,   60), S( -21,   48), S(  20,   21), S(   7,   -5), S(   7,   -5), S(   7,   -5), S(   7,   -5),
		S(   4,   19), S(  31,   51), S(  38,   40), S(  14,   40), S(   7,   -5), S(   7,   -5), S(   7,   -5), S(   7,   -5),
		S( -34,   17), S( -12,   45), S(  -6,   35), S( -29,   31), S(   7,   -5), S(   7,   -5), S(   7,   -5), S(   7,   -5),
		S( -53,    6), S( -26,   29), S(  -8,   16), S( -27,   14), S(   7,   -5), S(   7,   -5), S(   7,   -5), S(   7,   -5),
		S( -17,  -11), S(  11,    7), S(   1,   -3), S(  -4,   -6), S(   7,   -5), S(   7,   -5), S(   7,   -5), S(   7,   -5),
		S(  23,  -28), S(  26,   -5), S(   9,  -15), S(  -4,  -19), S(   7,   -5), S(   7,   -5), S(   7,   -5), S(   7,   -5),
		S(  15,  -60), S(  21,  -24), S(   1,  -28), S(   7,  -46), S(   7,   -5), S(   7,   -5), S(   7,   -5), S(   7,   -5),
	},
};

constexpr PackedScore MOBILITY[4][28] = {
	{S( -16,  -28), S( -38,  -48), S( -17,  -17), S(  -9,   -1), S(   2,    8), S(   7,   18), S(  14,   21), S(  23,   25), S(  34,   18), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -24,  -43), S( -35,  -58), S( -22,  -29), S( -14,  -11), S(  -5,   -2), S(   1,    8), S(   4,   16), S(   8,   19), S(   9,   21), S(  12,   21), S(  13,   21), S(  18,   15), S(  17,   21), S(  24,   -1), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -25,  -49), S( -31,  -73), S( -18,  -47), S(  -5,  -27), S(  -3,  -13), S(  -4,   -2), S(  -3,    4), S(   0,   10), S(   3,   13), S(   7,   18), S(   6,   27), S(   9,   33), S(  12,   37), S(  18,   36), S(  28,   33), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -31,    9), S( -62,  -74), S( -93, -103), S( -30, -201), S( -29,  -64), S( -22,   -7), S( -13,  -19), S( -11,    2), S( -10,   20), S(  -7,   28), S(  -4,   32), S(  -1,   33), S(   0,   43), S(   3,   41), S(   4,   45), S(   6,   46), S(   7,   48), S(  10,   48), S(   9,   48), S(  15,   40), S(  22,   32), S(  30,   15), S(  36,   13), S(  46,   -5), S(  66,  -20), S(  54,  -20), S(  28,   -5), S(   4,  -45)}
};

constexpr PackedScore THREAT_BY_PAWN[6] = {S(   4,  -19), S(  65,   30), S(  61,   60), S(  77,   27), S(  74,   -8), S(   0,    0)};
constexpr PackedScore THREAT_BY_KNIGHT[2][6] = {
	{S(   7,   29), S(  23,   24), S(  40,   45), S(  73,   15), S(  56,  -27), S(   0,    0)},
	{S(  -7,    8), S(  11,   23), S(  28,   29), S(  64,   33), S(  57,   -1), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_BISHOP[2][6] = {
	{S(  -3,   36), S(  39,   33), S(  -9,   31), S(  67,   17), S(  69,   53), S(   0,    0)},
	{S(  -3,    5), S(  18,   22), S( -22,  -18), S(  44,   45), S(  45,  122), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_ROOK[2][6] = {
	{S(  -1,   42), S(  17,   61), S(  26,   55), S(   7,  -38), S(  74,   13), S(   0,    0)},
	{S(  -8,    7), S(   2,   15), S(  13,    1), S(   8,  -85), S(  64,   47), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_QUEEN[2][6] = {
	{S(   6,    9), S(  24,   19), S(   9,   49), S(  18,   14), S(   9,  -48), S(  98,   46)},
	{S(  -2,    9), S(   0,    5), S(  -7,   17), S(  -5,    3), S( -17,  -72), S( 116,   63)}
};
constexpr PackedScore THREAT_BY_KING[6] = {S( -27,   49), S(   5,   52), S(  28,   43), S(  71,    9), S(   0,    0), S(   0,    0)};
constexpr PackedScore PUSH_THREAT = S(  15,   19);

constexpr PackedScore ISOLATED_PAWN[8] = {S(  -8,    6), S(  -4,  -16), S( -12,   -9), S( -10,  -16), S( -11,  -16), S(  -7,   -8), S(  -1,  -15), S(  -9,    7)};
constexpr PackedScore DOUBLED_PAWN[8] = {S(   1,  -62), S(  13,  -38), S(   1,  -29), S(   1,  -21), S(  -3,  -14), S( -13,  -19), S(   7,  -42), S(   7,  -75)};
constexpr PackedScore BACKWARDS_PAWN[8] = {S(   0,    0), S(  -8,  -14), S(  -2,  -14), S(  -8,  -12), S(   2,  -16), S(  30,  -10), S(   0,    0), S(   0,    0)};
constexpr PackedScore PAWN_PHALANX[8] = {S(   0,    0), S(   5,   -5), S(  10,   -3), S(  20,    7), S(  42,   39), S(  97,  226), S( -22,  351), S(   0,    0)};
constexpr PackedScore DEFENDED_PAWN[8] = {S(   0,    0), S(   0,    0), S(  19,    6), S(  11,    7), S(  16,   21), S(  29,   62), S( 136,   74), S(   0,    0)};
constexpr PackedScore CANDIDATE_PASSER[2][8] = {
	{S(   0,    0), S( -37,  -14), S( -19,   -8), S(   0,   29), S(  29,   55), S(  63,   81), S(   0,    0), S(   0,    0)},
	{S(   0,    0), S( -22,   -6), S( -10,   15), S(  -5,   30), S(  20,   43), S(  33,  156), S(   0,    0), S(   0,    0)}
};

constexpr PackedScore PASSED_PAWN[2][2][8] = {
	{
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -39,  -40), S( -16,   26), S(  -2,  152), S(  42,  231), S(   0,    0)},
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -27,  -52), S(   7,  -21), S(  31,   19), S(  58,   34), S(   0,    0)}
	},
	{
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -30,  -56), S(   1,  -23), S(  34,    8), S(  67,   -2), S(   0,    0)},
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -31,  -61), S(   2,  -33), S(  12,  -13), S(  -9,  -14), S(   0,    0)}
	}
};
constexpr PackedScore OUR_PASSER_PROXIMITY[8] = {S(   0,    0), S(  44,   84), S(   8,   68), S(   3,   42), S(   5,   31), S(  12,   23), S(  21,   20), S(  16,   19)};
constexpr PackedScore THEIR_PASSER_PROXIMITY[8] = {S(   0,    0), S( -41,    7), S(  23,    0), S(  16,   27), S(  20,   46), S(  14,   79), S(  16,   80), S(  17,   69)};

constexpr PackedScore PAWN_STORM[2][4][8] = {
	{
		{S(  14,   15), S(-134,  -49), S( -11,   -8), S(   5,  -13), S(   1,   -1), S(  -5,    9), S(  -3,    8), S(   0,    0)},
		{S(  11,    4), S( -20,  -97), S(  42,  -42), S(   7,  -11), S(   2,   -5), S( -10,    7), S(  -7,    9), S(   0,    0)},
		{S(  -3,    6), S(  56,  -96), S(  61,  -43), S(  19,  -18), S(   2,   -1), S(  -5,    6), S(  -8,   12), S(   0,    0)},
		{S(   8,   -7), S( 108,  -83), S(  31,  -21), S(  13,   -2), S(  -2,    3), S(  -7,    0), S(  -2,    1), S(   0,    0)}
	},
	{
		{S(   0,    0), S(  -3,  -27), S( -35,  116), S(  14,  -46), S(  -2,    8), S(  -1,    5), S(  -4,    9), S(   0,    0)},
		{S(   0,    0), S(   7,  -93), S(  -8,   74), S(  52,  -38), S(   2,    2), S(  -7,    6), S(  -7,    8), S(   0,    0)},
		{S(   0,    0), S(  -6,   23), S( -65, -115), S(  22,  -28), S(   2,    5), S(   0,    5), S(  -8,   11), S(   0,    0)},
		{S(   0,    0), S(  -1,  -45), S(  65,   -5), S(  21,   -1), S(   1,    8), S(   1,   -9), S(   0,    7), S(   0,    0)}
	}
};
constexpr PackedScore PAWN_SHIELD[4][8] = {
	{S(  17,    1), S(  -8,   25), S( -15,   16), S(  -1,    8), S(   4,    1), S( -41,  -24), S( -75,  -38), S(   0,    0)},
	{S(  18,   -1), S( -14,   11), S(  -9,    7), S(  11,   -3), S(   9,  -12), S( -13,  -17), S( -52,  -31), S(   0,    0)},
	{S(   6,    7), S( -16,    8), S(  16,    5), S(   2,   -1), S(  -1,   -2), S(   5,  -20), S( -16,  -39), S(   0,    0)},
	{S(  14,   -4), S(   3,   -2), S(  -3,    0), S(   1,   -5), S(   9,   -9), S(  28,  -21), S( -19,  -19), S(   0,    0)}
};
constexpr PackedScore SAFE_KNIGHT_CHECK = S(  85,    2);
constexpr PackedScore SAFE_BISHOP_CHECK = S(  16,   30);
constexpr PackedScore SAFE_ROOK_CHECK = S(  75,   18);
constexpr PackedScore SAFE_QUEEN_CHECK = S(  32,   45);
constexpr PackedScore UNSAFE_KNIGHT_CHECK = S(  10,    1);
constexpr PackedScore UNSAFE_BISHOP_CHECK = S(  16,   12);
constexpr PackedScore UNSAFE_ROOK_CHECK = S(  24,   -2);
constexpr PackedScore UNSAFE_QUEEN_CHECK = S(   7,   15);
constexpr PackedScore KING_ATTACKER_WEIGHT[4] = {S(   2,   -5), S(  -3,   -5), S(   5,  -21), S( -12,   -2)};
constexpr PackedScore KING_ATTACKS = S(   4,   -1);
constexpr PackedScore WEAK_KING_RING = S(   7,   -1);

constexpr int SAFETY_SCALE_ATTACKERS[6] = {0, 0, 0, 0, 0, 0};

constexpr PackedScore MINOR_BEHIND_PAWN = S(   6,   13);
constexpr PackedScore KNIGHT_OUTPOST = S(  23,   17);
constexpr PackedScore BISHOP_PAWNS[7] = {S(   4,   20), S(   6,   19), S(   4,   11), S(   1,    3), S(  -2,   -6), S(  -2,  -19), S(  -6,  -31)};
constexpr PackedScore BISHOP_PAIR = S(  21,   61);
constexpr PackedScore LONG_DIAG_BISHOP = S(  16,    8);
constexpr PackedScore ROOK_OPEN[2] = {S(  26,    4), S(  14,    4)};

constexpr PackedScore TEMPO = S(  32,   35);

constexpr PackedScore COMPLEXITY_PAWNS = S(   0,    9);
constexpr PackedScore COMPLEXITY_PASSERS = S(   0,    1);
constexpr PackedScore COMPLEXITY_PAWNS_BOTH_SIDES = S(   0,   67);
constexpr PackedScore COMPLEXITY_PAWN_ENDGAME = S(   0,   65);
constexpr PackedScore COMPLEXITY_OFFSET = S(   0, -130);

#undef S
