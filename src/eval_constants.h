#include "sirius/defs.h"

#define S(mg, eg) {mg, eg}

constexpr PackedScore MATERIAL[6] = {S(  61,  132), S( 291,  444), S( 310,  453), S( 386,  812), S( 806, 1495), S(0, 0)};

constexpr PackedScore PSQT[6][64] = {
	{
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
		S(  66,   76), S(  29,   93), S(  28,   95), S(  53,   75), S(  62,   68), S(  30,   95), S(  29,  105), S(  64,   83),
		S(  10,   13), S(   0,   42), S(  12,    5), S(  29,  -28), S(  17,  -21), S(   5,    1), S( -16,   34), S(  -3,   18),
		S(  16,    9), S(   5,   14), S(   8,   -9), S(  13,  -24), S(   0,  -23), S(  -4,   -9), S(  -9,   14), S( -12,   12),
		S(   9,    0), S(   4,   17), S(   7,  -14), S(  16,  -15), S(  10,  -14), S(  -3,   -8), S( -15,   16), S( -14,    2),
		S(   3,   -2), S(  11,   13), S(  17,   -4), S(  -1,    1), S(  -6,    0), S( -11,   -4), S( -23,   13), S( -26,    0),
		S(  16,   -3), S(  30,    7), S(  15,   -8), S(   7,    5), S(  -6,   -1), S(  -6,   -4), S( -15,   17), S( -17,    4),
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
	},
	{
		S( -75,  -98), S( -78,  -27), S( -27,  -16), S(  11,  -14), S( -34,    3), S( -65,    6), S(-104,    8), S( -87,  -58),
		S( -12,  -15), S(  23,    0), S(  29,   -6), S(   6,    4), S(   9,    8), S(   2,   13), S(  -4,   18), S( -11,    3),
		S(  13,   -9), S(   6,    0), S(  48,  -11), S(  39,    7), S(  22,   15), S(  12,   12), S(   2,    6), S(  -8,    4),
		S(  31,    0), S(  33,    8), S(  43,   12), S(  32,   17), S(  25,   24), S(  31,   12), S(  19,    5), S(   8,   13),
		S(  10,   15), S(  16,   15), S(  24,   16), S(  18,   26), S(  24,   18), S(  19,   18), S(  21,    3), S(   5,    6),
		S(  12,   -1), S(  17,    2), S(  16,   -2), S(  13,   16), S(   6,   14), S(   1,    0), S(   2,   -5), S( -11,   -4),
		S(   4,    1), S(  12,   -7), S(   5,   -5), S(   9,    0), S(   3,    0), S(  -6,   -2), S(  -8,   -5), S( -20,   -6),
		S( -12,  -17), S( -14,   -5), S(  -6,   -9), S(   1,    2), S(  -6,   -1), S( -22,   -7), S( -16,  -11), S( -49,   -5),
	},
	{
		S( -46,  -14), S( -30,    4), S(  -5,   -2), S( -74,   12), S( -64,   17), S( -50,    2), S( -23,    6), S( -34,   10),
		S( -23,   -6), S( -49,    7), S( -11,    2), S(   1,   -2), S( -18,   10), S(   4,    0), S( -15,   -4), S(  -4,   -4),
		S(  15,   12), S(  13,    3), S(  26,    4), S(  13,    8), S(  20,    3), S(  -2,    1), S(   9,    8), S(   5,    3),
		S(  -8,    4), S(   9,    8), S(   9,   14), S(  20,   17), S(  21,   24), S(  18,    9), S(   5,   13), S(  -8,    6),
		S(  17,   -6), S(   2,    9), S(   8,   11), S(  11,   17), S(  21,   13), S(   1,   17), S(   0,    8), S(   1,    0),
		S(  20,  -11), S(  25,   -6), S(   5,   -4), S(   9,   12), S(   0,    8), S(   1,   -1), S(  16,    3), S(   2,   -7),
		S(  27,  -21), S(  19,  -22), S(  25,  -10), S(   5,   -3), S(  -2,    1), S(  10,  -16), S(   2,  -24), S(  13,  -11),
		S(  24,  -40), S(  16,  -16), S( -10,    2), S(  15,   -4), S(   0,   -3), S(  -2,    3), S(  12,   -4), S(   4,  -18),
	},
	{
		S(  13,    7), S( -24,   35), S( -22,   27), S( -11,   17), S( -28,   27), S( -23,   31), S(  -9,   22), S(  -3,   19),
		S(  31,    1), S(  32,    8), S(  12,   15), S(   6,   15), S(  16,   17), S(   3,   29), S(  -1,   25), S(   3,   16),
		S(   8,    1), S(  32,    2), S(  16,    3), S(  24,    1), S(   2,   11), S(  -1,   20), S(  10,   16), S(  -9,   18),
		S(   3,    5), S(   3,   12), S(   9,    8), S(   8,    1), S(   2,    9), S(   6,   13), S(   4,   14), S(  -7,   15),
		S(  -9,   -1), S(  12,    3), S( -10,    7), S(   6,    0), S(  -5,    3), S(  -8,    6), S(  -9,    6), S( -12,    6),
		S(   9,  -25), S(  24,  -26), S(  -1,  -15), S(   2,  -18), S( -10,  -10), S( -13,  -11), S( -11,  -12), S( -17,   -9),
		S(  -6,  -28), S(  22,  -37), S(   2,  -23), S(   3,  -22), S(  -3,  -19), S(  -4,  -17), S( -13,  -14), S( -16,  -20),
		S(  -7,  -34), S(  -5,  -17), S(  -1,  -20), S(   8,  -27), S(   1,  -24), S(  -6,  -16), S(  -6,  -20), S(  -7,  -18),
	},
	{
		S(  -3,   -7), S(  37,  -35), S( -23,   32), S( -16,   18), S(  10,   -8), S( -24,   15), S( -40,    8), S( -29,   11),
		S(  40,    4), S(   2,   14), S( -19,   33), S( -30,   52), S( -20,   36), S(  -4,    9), S(  -2,   -9), S(   8,   -9),
		S(  14,    7), S(   8,   12), S(   1,   19), S( -11,   28), S(   3,   17), S(   8,   10), S(   6,   -7), S(  18,  -11),
		S(   8,   14), S(   5,   32), S(   8,    9), S( -10,   31), S(  -6,   27), S(   9,    5), S(   6,   12), S(   5,    4),
		S(  11,    6), S(  14,   11), S(   1,   14), S(   3,   25), S(  -5,   33), S(  -2,   21), S(   3,   17), S(   2,    6),
		S(  16,  -21), S(  15,   -5), S(   5,    5), S(  -6,   14), S(  -4,   12), S(  -2,   14), S(  10,   -8), S(  11,  -21),
		S(  10,  -49), S(  13,  -63), S(   8,  -39), S(   5,  -11), S(   4,   -5), S(   5,  -18), S(   5,  -23), S(   9,  -35),
		S(   5,  -48), S( -11,  -48), S( -20,  -22), S(  -4,  -23), S(  -3,  -18), S(  -7,  -16), S( -10,  -19), S( -11,  -16),
	},
	{
		S( -35,  -53), S( -45,   14), S( -78,    9), S( -66,    5), S(   8,   -6), S(   8,   -6), S(   8,   -6), S(   8,   -6),
		S( -71,   33), S( -23,   62), S( -31,   50), S(  16,   20), S(   8,   -6), S(   8,   -6), S(   8,   -6), S(   8,   -6),
		S(   9,   17), S(  33,   49), S(  39,   41), S(  15,   40), S(   8,   -6), S(   8,   -6), S(   8,   -6), S(   8,   -6),
		S( -32,   16), S(  -9,   43), S(  -4,   35), S( -28,   31), S(   8,   -6), S(   8,   -6), S(   8,   -6), S(   8,   -6),
		S( -50,    5), S( -21,   28), S(  -5,   16), S( -27,   14), S(   8,   -6), S(   8,   -6), S(   8,   -6), S(   8,   -6),
		S( -10,  -14), S(  14,    6), S(   2,   -4), S(  -6,   -6), S(   8,   -6), S(   8,   -6), S(   8,   -6), S(   8,   -6),
		S(  27,  -31), S(  27,   -7), S(  10,  -16), S(  -5,  -20), S(   8,   -6), S(   8,   -6), S(   8,   -6), S(   8,   -6),
		S(  16,  -61), S(  22,  -26), S(   2,  -29), S(   9,  -48), S(   8,   -6), S(   8,   -6), S(   8,   -6), S(   8,   -6),
	},
};

constexpr PackedScore MOBILITY[4][28] = {
	{S( -17,  -27), S( -38,  -48), S( -17,  -17), S(  -8,    0), S(   2,    8), S(   7,   19), S(  15,   22), S(  23,   26), S(  34,   19), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -26,  -43), S( -35,  -59), S( -22,  -30), S( -14,  -12), S(  -4,   -2), S(   1,    8), S(   4,   16), S(   8,   20), S(   9,   22), S(  12,   22), S(  14,   22), S(  20,   15), S(  17,   23), S(  27,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -25,  -52), S( -32,  -75), S( -19,  -49), S(  -6,  -28), S(  -3,  -13), S(  -4,   -2), S(  -3,    4), S(   0,   10), S(   3,   14), S(   7,   19), S(   6,   27), S(   9,   34), S(  13,   37), S(  17,   37), S(  26,   34), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -35,   19), S( -64,  -72), S( -91, -107), S( -31, -201), S( -29,  -71), S( -22,  -10), S( -14,  -20), S( -11,    0), S( -10,   19), S(  -7,   28), S(  -4,   31), S(  -1,   33), S(   0,   44), S(   4,   41), S(   5,   46), S(   6,   47), S(   7,   49), S(  10,   49), S(   9,   50), S(  16,   42), S(  23,   33), S(  31,   16), S(  36,   15), S(  46,   -4), S(  59,  -12), S(  50,  -17), S(  34,  -15), S( -10,  -38)}
};

constexpr PackedScore THREAT_BY_PAWN[6] = {S(   5,  -21), S(  66,   30), S(  61,   61), S(  77,   28), S(  74,   -7), S(   0,    0)};
constexpr PackedScore THREAT_BY_KNIGHT[2][6] = {
	{S(   7,   29), S(  22,   30), S(  40,   45), S(  74,   15), S(  56,  -25), S(   0,    0)},
	{S(  -7,    8), S(  10,   27), S(  28,   29), S(  64,   34), S(  57,    0), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_BISHOP[2][6] = {
	{S(  -2,   36), S(  39,   35), S(  -9,   29), S(  68,   17), S(  67,   58), S(   0,    0)},
	{S(  -4,    6), S(  17,   22), S( -23,  -20), S(  43,   47), S(  45,  123), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_ROOK[2][6] = {
	{S(   0,   43), S(  18,   61), S(  27,   56), S(   8,  -43), S(  74,   13), S(   0,    0)},
	{S(  -7,    7), S(   3,   14), S(  13,    1), S(   9,  -90), S(  65,   46), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_QUEEN[2][6] = {
	{S(   6,   10), S(  23,   19), S(   9,   49), S(  19,   15), S(   9,  -49), S( 102,   40)},
	{S(  -2,   10), S(   0,    6), S(  -8,   18), S(  -5,    3), S( -17,  -73), S( 113,   66)}
};
constexpr PackedScore THREAT_BY_KING[6] = {S( -25,   49), S(   4,   52), S(  32,   43), S(  75,    9), S(   0,    0), S(   0,    0)};
constexpr PackedScore PUSH_THREAT = S(  14,   20);

constexpr PackedScore ISOLATED_PAWN[8] = {S(  -8,    6), S(  -4,  -16), S( -12,   -9), S( -11,  -16), S( -11,  -16), S(  -7,   -8), S(  -1,  -15), S( -10,    7)};
constexpr PackedScore DOUBLED_PAWN[8] = {S(   1,  -63), S(  13,  -38), S(   1,  -29), S(   0,  -21), S(  -3,  -14), S( -12,  -20), S(   8,  -42), S(   7,  -76)};
constexpr PackedScore BACKWARDS_PAWN[8] = {S(   0,    0), S(  -7,  -14), S(  -2,  -14), S(  -9,  -12), S(   2,  -16), S(  29,   -7), S(   0,    0), S(   0,    0)};
constexpr PackedScore PAWN_PHALANX[8] = {S(   0,    0), S(   4,   -4), S(  10,   -2), S(  20,    7), S(  42,   39), S(  97,  225), S( -21,  353), S(   0,    0)};
constexpr PackedScore DEFENDED_PAWN[8] = {S(   0,    0), S(   0,    0), S(  19,    7), S(  11,    7), S(  16,   21), S(  27,   63), S( 136,   74), S(   0,    0)};
constexpr PackedScore CANDIDATE_PASSER[2][8] = {
	{S(   0,    0), S( -38,  -13), S( -20,   -6), S(   0,   29), S(  29,   56), S(  62,   84), S(   0,    0), S(   0,    0)},
	{S(   0,    0), S( -22,   -6), S(  -9,   14), S(  -5,   31), S(  20,   44), S(  37,  152), S(   0,    0), S(   0,    0)}
};

constexpr PackedScore PASSED_PAWN[2][2][8] = {
	{
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -38,  -41), S( -17,   26), S(  -4,  154), S(  36,  234), S(   0,    0)},
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -26,  -53), S(   8,  -22), S(  31,   19), S(  58,   35), S(   0,    0)}
	},
	{
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -30,  -57), S(   2,  -23), S(  34,    8), S(  67,   -1), S(   0,    0)},
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -31,  -62), S(   2,  -34), S(  12,  -13), S(  -7,  -15), S(   0,    0)}
	}
};
constexpr PackedScore OUR_PASSER_PROXIMITY[8] = {S(   0,    0), S(  38,   85), S(   6,   69), S(   3,   43), S(   6,   31), S(  12,   23), S(  21,   21), S(  16,   19)};
constexpr PackedScore THEIR_PASSER_PROXIMITY[8] = {S(   0,    0), S( -40,    7), S(  22,    0), S(  16,   27), S(  20,   47), S(  14,   79), S(  16,   80), S(  17,   69)};

constexpr PackedScore PAWN_STORM[2][4][8] = {
	{
		{S(  15,   14), S(-133,  -48), S( -10,   -8), S(   5,  -14), S(   0,   -1), S(  -5,    9), S(  -3,    8), S(   0,    0)},
		{S(  12,    4), S( -22,  -98), S(  40,  -41), S(   6,  -11), S(   2,   -5), S( -10,    7), S(  -6,    9), S(   0,    0)},
		{S(  -3,    6), S(  58,  -98), S(  61,  -44), S(  19,  -18), S(   3,   -1), S(  -6,    6), S(  -8,   12), S(   0,    0)},
		{S(   9,   -7), S( 110,  -85), S(  33,  -21), S(  13,   -1), S(  -2,    4), S(  -8,    0), S(  -3,    1), S(   0,    0)}
	},
	{
		{S(   0,    0), S(  -3,  -28), S( -29,  117), S(   9,  -44), S(  -3,    9), S(  -2,    5), S(  -5,    9), S(   0,    0)},
		{S(   0,    0), S(   8,  -92), S(   3,   67), S(  53,  -43), S(   2,    3), S(  -7,    6), S(  -7,    8), S(   0,    0)},
		{S(   0,    0), S(  -6,   26), S( -68, -112), S(  21,  -29), S(   2,    4), S(   0,    5), S(  -8,   11), S(   0,    0)},
		{S(   0,    0), S(  -4,  -47), S(  65,   -6), S(  19,    0), S(   1,    8), S(   1,   -9), S(   0,    6), S(   0,    0)}
	}
};
constexpr PackedScore PAWN_SHIELD[4][8] = {
	{S(  17,    1), S(  -7,   25), S( -15,   17), S(  -1,    8), S(   4,    1), S( -40,  -24), S( -78,  -35), S(   0,    0)},
	{S(  17,    0), S( -12,   10), S( -11,    8), S(  11,   -3), S(   8,  -12), S( -14,  -17), S( -55,  -29), S(   0,    0)},
	{S(   5,    8), S( -16,    8), S(  16,    5), S(   2,   -1), S(  -1,   -2), S(   3,  -18), S( -15,  -41), S(   0,    0)},
	{S(  14,   -4), S(   5,   -3), S(  -3,    0), S(   1,   -6), S(   8,   -9), S(  29,  -21), S( -14,  -22), S(   0,    0)}
};
constexpr PackedScore SAFE_KNIGHT_CHECK = S(  91,   -2);
constexpr PackedScore SAFE_BISHOP_CHECK = S(  17,   22);
constexpr PackedScore SAFE_ROOK_CHECK = S(  72,    9);
constexpr PackedScore SAFE_QUEEN_CHECK = S(  29,   31);
constexpr PackedScore UNSAFE_KNIGHT_CHECK = S(  10,    0);
constexpr PackedScore UNSAFE_BISHOP_CHECK = S(  16,   10);
constexpr PackedScore UNSAFE_ROOK_CHECK = S(  21,   -1);
constexpr PackedScore UNSAFE_QUEEN_CHECK = S(   6,   10);
constexpr PackedScore KING_ATTACKER_WEIGHT[4] = {S(  17,   -3), S(  13,   -2), S(  15,  -15), S(   4,    4)};
constexpr PackedScore KING_ATTACKS[14] = {S( -38,    8), S( -44,    6), S( -49,    4), S( -52,    7), S( -51,    6), S( -44,    3), S( -29,    0), S( -11,   -9), S(  17,  -21), S(  38,  -15), S(  57,  -27), S(  59,   20), S(  85,  -22), S(  71,   28)};
constexpr PackedScore WEAK_KING_RING[17] = {S( -30,   48), S( -29,   27), S( -24,   23), S( -21,   20), S( -14,   13), S(  -5,    7), S(   5,    1), S(  19,   -3), S(  36,   -6), S(  50,   -9), S(  62,  -12), S(  65,   -8), S(  76,  -11), S(  78,  -13), S(  78,   -9), S(  99,  -14), S( 107,  -15)};

constexpr PackedScore MINOR_BEHIND_PAWN = S(   6,   13);
constexpr PackedScore KNIGHT_OUTPOST = S(  23,   17);
constexpr PackedScore BISHOP_PAWNS[7] = {S(   4,   20), S(   6,   19), S(   4,   12), S(   2,    4), S(  -2,   -5), S(  -2,  -18), S(  -6,  -30)};
constexpr PackedScore BISHOP_PAIR = S(  20,   63);
constexpr PackedScore LONG_DIAG_BISHOP = S(  16,    8);
constexpr PackedScore ROOK_OPEN[2] = {S(  26,    3), S(  14,    3)};

constexpr PackedScore TEMPO = S(  32,   36);

constexpr PackedScore COMPLEXITY_PAWNS = S(   0,    8);
constexpr PackedScore COMPLEXITY_PASSERS = S(   0,    1);
constexpr PackedScore COMPLEXITY_PAWNS_BOTH_SIDES = S(   0,   69);
constexpr PackedScore COMPLEXITY_PAWN_ENDGAME = S(   0,   65);
constexpr PackedScore COMPLEXITY_OFFSET = S(   0, -131);

#undef S
