#include "sirius/defs.h"

// clang-format off
#define S(mg, eg) {mg, eg}

constexpr ScorePair MATERIAL[6] = {S(  78,  158), S( 387,  529), S( 405,  551), S( 517,  950), S(1068, 1917), S(0, 0)};

constexpr ScorePair PSQT[6][64] = {
    {
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  79,   81), S(   5,  100), S(  25,  102), S(  32,   95), S(  67,   60), S(  50,   52), S(  33,   97), S(  90,   82),
        S(   9,   13), S( -11,   27), S(   5,   -2), S(   7,  -10), S(  -4,  -20), S(  -1,   -9), S( -17,   22), S(  -2,   11),
        S(   6,   13), S(   5,   24), S(  10,    3), S(  14,  -18), S(   5,  -18), S(   1,  -11), S(  -1,   15), S(  -9,   12),
        S(  -7,   -3), S( -11,   22), S(  19,  -13), S(  22,  -19), S(  16,  -20), S(   4,  -14), S( -16,   14), S( -17,   -5),
        S( -14,   -5), S(  14,   11), S(   2,   15), S(  10,   -1), S(  -3,    1), S(  -9,   -2), S( -19,   14), S( -27,   -7),
        S(  -5,   -6), S(  29,    7), S(  31,  -21), S(   6,   10), S(  -2,    1), S(  -4,   -1), S(  -8,   13), S( -21,   -3),
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
    },
    {
        S( -73, -138), S( -98,   14), S(-143,   53), S(  -3,   13), S( -26,   16), S( -68,    3), S(-134,   10), S(-109,  -77),
        S(   0,   -3), S( -14,   25), S(  29,   11), S(  46,   13), S(  28,   21), S(  28,   -8), S( -30,   21), S( -11,  -12),
        S(  20,   -6), S(  13,   14), S(  47,   11), S(  35,   15), S(  27,   17), S(  28,    9), S(  11,   10), S(  10,  -13),
        S(  37,    7), S(  36,   12), S(  43,   18), S(  37,   27), S(  42,   23), S(  21,   19), S(  23,    5), S(  14,    6),
        S(  25,    7), S(  34,    7), S(  30,   18), S(  22,   34), S(  22,   25), S(  22,   19), S(  21,    2), S(   9,    4),
        S(   4,   -7), S(  22,    1), S(  18,    1), S(  18,   18), S(  14,   12), S(  -2,    0), S(   5,   -7), S( -10,   -9),
        S(  12,  -12), S(   3,    3), S(   9,  -14), S(  13,    0), S(   3,    1), S(   2,  -13), S(  -8,   -5), S( -19,  -25),
        S( -31,  -28), S( -13,  -23), S(   2,  -18), S(   5,   -8), S(  -1,   -4), S(   0,  -24), S( -21,  -24), S( -27,  -42),
    },
    {
        S( -36,  -43), S( -70,   24), S(-114,   30), S( -89,   27), S( -95,   32), S( -84,   23), S( -66,   24), S( -38,  -16),
        S( -18,   -3), S( -47,    6), S( -17,   12), S( -34,   15), S( -22,   17), S( -17,   14), S( -14,  -13), S( -12,   -1),
        S(  27,  -11), S(   8,   13), S(  25,    8), S(  28,   12), S(  24,   13), S(  12,    2), S(  20,    3), S(   7,   -4),
        S(   9,   -4), S(  15,   16), S(  18,   21), S(  20,   34), S(  32,   30), S(  20,   16), S(  16,   10), S(   7,  -10),
        S(  23,  -11), S(   6,    8), S(  12,   21), S(  25,   19), S(  24,   23), S(  16,   14), S(   8,    7), S(  16,  -10),
        S(  24,  -13), S(  28,   -6), S(  16,   -8), S(  17,   13), S(  15,    6), S(   9,  -10), S(  37,  -10), S(  17,  -15),
        S(  25,  -18), S(  34,  -35), S(  31,  -16), S(  13,   -6), S(   1,   -5), S(  13,  -18), S(  11,  -32), S(  27,  -14),
        S(  11,  -39), S(  21,  -14), S( -14,   -9), S(   7,  -15), S(   5,  -13), S(  -6,   -6), S(  18,  -20), S(   9,  -23),
    },
    {
        S(  22,   17), S(  42,   13), S(  37,   13), S(  21,   29), S(  33,   16), S(  21,   22), S(  26,   24), S(  32,   21),
        S(  30,   14), S(  14,   26), S(  25,   23), S(  17,   28), S(  29,   28), S(  16,   28), S(  14,   27), S(  21,   27),
        S( -22,   23), S(   9,   16), S(  20,   11), S(  22,    8), S(  14,   10), S(   9,   16), S(   7,   21), S(  -5,   27),
        S( -22,   16), S(  -9,   20), S(  -1,   14), S( -10,   12), S(  -3,    8), S(  -2,   13), S(  -3,   18), S(  -7,   14),
        S( -29,    0), S( -12,    6), S( -15,   11), S( -11,    6), S( -13,    2), S( -17,   10), S( -18,   12), S( -16,    2),
        S( -22,  -26), S(   6,  -28), S( -10,   -9), S(   1,  -22), S(  -1,  -23), S( -18,  -10), S(  -5,  -20), S( -23,  -15),
        S( -66,  -28), S(  -9,  -40), S(   3,  -28), S(   0,  -29), S(  -3,  -28), S(  -7,  -24), S( -16,  -28), S( -24,  -25),
        S( -20,  -40), S( -27,  -19), S(   7,  -27), S(  17,  -35), S(   7,  -34), S(  -2,  -25), S(   0,  -30), S(  -2,  -26),
    },
    {
        S(  15,   31), S(  54,    3), S(  22,   42), S(  18,   38), S(  31,   22), S(  35,   13), S(  15,   18), S( -22,   43),
        S(  39,    1), S(  38,   -4), S(  14,   26), S( -18,   48), S(  11,   36), S(  19,    3), S(  21,   -9), S(  12,    3),
        S(   9,   12), S(  12,   16), S(  -3,   27), S( -28,   51), S(   0,   36), S(  16,    2), S(  32,  -28), S(  24,  -15),
        S(  -7,   18), S( -18,   30), S( -13,   25), S( -28,   46), S( -25,   45), S(   7,   10), S(  -1,   24), S(   2,    3),
        S( -19,   32), S( -14,   28), S( -18,   25), S( -22,   38), S( -26,   50), S(  -9,   27), S(  -2,   15), S(  -7,    9),
        S(  -9,  -15), S(  -3,  -16), S( -11,    3), S( -23,   19), S( -14,   17), S(  -7,    7), S(   6,   -6), S(   3,   -9),
        S(  -4,  -71), S(  11, -105), S(   3,  -69), S(  -6,  -23), S( -10,  -16), S(   6,  -38), S(   0,  -35), S(   0,  -21),
        S(   0,  -69), S( -23,  -91), S( -19,  -65), S( -11,  -54), S(  -6,  -38), S( -12,  -41), S( -17,  -34), S( -18,  -15),
    },
    {
        S(  57, -129), S(  22,  139), S(  -6,    1), S( -19,  -62), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  34,   66), S(   7,  176), S( -50,   47), S( -66,  -20), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  62,  104), S(  14,  182), S( -62,   31), S(-168,  -59), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S( -34,  113), S( -52,  168), S( -84,   14), S(-166,  -71), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S( -74,  104), S( -67,  145), S(-105,   -3), S(-134,  -89), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(   1,   76), S(  -4,  110), S( -49,  -27), S( -74, -114), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  75,   41), S(  58,   77), S(  19,  -68), S( -15, -152), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
        S(  73,    4), S(  73,   46), S(  22,  -97), S(  18, -201), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
    },
};

constexpr ScorePair MOBILITY[4][28] = {
    {S(  -8,  -25), S( -43,  -63), S( -26,  -19), S( -12,    0), S(   0,   11), S(   7,   22), S(  17,   27), S(  27,   31), S(  40,   18), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S(  -4,  -37), S( -50,  -66), S( -28,  -35), S( -15,  -11), S(  -7,    1), S(  -2,   13), S(   0,   21), S(   4,   24), S(   3,   27), S(   8,   27), S(   6,   27), S(  16,   17), S(  21,   17), S(  57,  -21), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S( -28,  -77), S( -65,  -75), S( -20,  -50), S( -12,  -29), S(  -2,  -17), S(   4,   -4), S(   3,    9), S(   6,   14), S(   7,   19), S(  10,   26), S(  13,   34), S(  13,   42), S(  14,   48), S(  17,   48), S(  49,   23), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
    {S( -15,   52), S( -32,  -14), S( -18,  -89), S( -52, -136), S( -21, -157), S( -17,  -75), S(  -8,  -54), S(  -3,  -32), S(  -4,  -10), S(  -4,    7), S(  -1,   15), S(  -1,   28), S(   1,   34), S(   2,   45), S(   3,   50), S(   5,   50), S(   2,   58), S(   3,   58), S(   5,   59), S(   7,   53), S(  12,   50), S(  17,   34), S(  18,   34), S(  26,   19), S(  16,   28), S(  32,   -9), S(  48,  -54), S(  -6,  -29)}
};

constexpr ScorePair THREAT_BY_PAWN[6] = {S(  -6,  -25), S(  89,   49), S(  80,   84), S(  87,   59), S(  70,   23), S(   0,    0)};
constexpr ScorePair THREAT_BY_KNIGHT[2][6] = {
    {S(   7,   43), S(   9,   97), S(  62,   37), S( 104,   15), S(  49,   14), S(   0,    0)},
    {S( -10,   13), S(   4,   89), S(  47,   34), S(  87,   52), S(  61,   60), S(   0,    0)}
};
constexpr ScorePair THREAT_BY_BISHOP[2][6] = {
    {S(   3,   40), S(  45,   53), S(  10,   38), S(  72,   42), S(  78,   56), S(   0,    0)},
    {S(  -7,    4), S(  24,   24), S(  -1,    2), S(  66,   90), S(  79,   90), S(   0,    0)}
};
constexpr ScorePair THREAT_BY_ROOK[2][6] = {
    {S(  -3,   59), S(  46,   58), S(  56,   56), S(   4,  -87), S(  85,  -23), S(   0,    0)},
    {S( -13,   11), S(  11,   16), S(  23,    5), S(  25, -126), S(  65,  114), S(   0,    0)}
};
constexpr ScorePair THREAT_BY_QUEEN[2][6] = {
    {S(   9,   28), S(  31,   31), S(  26,   65), S(  19,   16), S(   2,  -65), S( 188,   85)},
    {S(  -8,   23), S(   1,    7), S( -10,   33), S(  -5,   -7), S( -17,  -53), S( 136,  230)}
};
constexpr ScorePair THREAT_BY_KING[6] = {S(  58,   18), S(  31,   49), S( 121,   36), S( 103,    8), S(   0,    0), S(   0,    0)};
constexpr ScorePair KNIGHT_HIT_QUEEN = S(   9,    1);
constexpr ScorePair BISHOP_HIT_QUEEN = S(  20,   16);
constexpr ScorePair ROOK_HIT_QUEEN = S(  25,   -5);
constexpr ScorePair PUSH_THREAT = S(  16,   21);
constexpr ScorePair RESTRICTED_SQUARES = S(   3,    3);

constexpr ScorePair ISOLATED_PAWN[8] = {S(  -4,    3), S(  -5,  -20), S( -11,  -14), S( -12,  -19), S( -17,  -17), S( -12,   -9), S(  -7,  -14), S( -10,    2)};
constexpr ScorePair DOUBLED_PAWN[8] = {S(   1,  -64), S(   8,  -49), S(  -1,  -35), S(  -8,  -19), S( -20,    2), S(  -5,  -29), S(   6,  -49), S(   9,  -54)};
constexpr ScorePair BACKWARDS_PAWN[8] = {S(   0,    0), S(  -9,  -15), S(   1,  -18), S(  -8,  -17), S(  11,  -26), S(   9,   35), S(   0,    0), S(   0,    0)};
constexpr ScorePair PAWN_PHALANX[8] = {S(   0,    0), S(   6,   -7), S(  14,   -3), S(  23,   12), S(  49,   40), S(  89,  160), S( 145,  223), S(   0,    0)};
constexpr ScorePair DEFENDED_PAWN[8] = {S(   0,    0), S(   0,    0), S(  21,    6), S(  13,   10), S(  22,   28), S(  51,   66), S(  93,  133), S(   0,    0)};
constexpr ScorePair CANDIDATE_PASSER[2][8] = {
    {S(   0,    0), S( -27,  -15), S(  -5,  -19), S(  -3,    3), S(  21,   27), S(  51,  100), S(   0,    0), S(   0,    0)},
    {S(   0,    0), S( -18,  -12), S( -10,   10), S(  -5,   29), S(  12,   42), S(  56,  118), S(   0,    0), S(   0,    0)}
};

constexpr ScorePair PASSED_PAWN[2][2][8] = {
    {
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -40,  -34), S( -14,   29), S(  32,  158), S( 149,  259), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -28,  -49), S(  -1,  -17), S(  37,   66), S(  99,   97), S(   0,    0)}
    },
    {
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -32,  -49), S(  -7,  -13), S(  34,   64), S(  53,   66), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S(   0,    0), S( -33,  -62), S(  -4,  -35), S(  21,   34), S(  10,   32), S(   0,    0)}
    }
};
constexpr ScorePair OUR_PASSER_PROXIMITY[8] = {S(  90,  131), S( 133,   82), S(  54,   80), S(  -5,   69), S(  -1,   39), S(   3,   25), S(  19,   12), S(  -3,   24)};
constexpr ScorePair THEIR_PASSER_PROXIMITY[8] = {S( -56,    8), S(   7,   -1), S(  32,    2), S(  26,   32), S(  14,   73), S(  18,   90), S(  24,   93), S(  24,   72)};
constexpr ScorePair PASSER_DEFENDED_PUSH[8] = {S(   0,    0), S(   0,    0), S(   0,    0), S(  10,    8), S(  10,   25), S(  44,   38), S(  69,  121), S(   0,    0)};

constexpr ScorePair PAWN_STORM[2][4][8] = {
    {
        {S(  32,   53), S( -59, -105), S(  19,  -33), S(  53,   30), S(  24,   47), S(   7,   49), S(  -1,   54), S(   0,    0)},
        {S(  27,   33), S(  94, -147), S( 101,  -71), S(  45,    7), S(  13,   31), S( -21,   36), S(   4,   35), S(   0,    0)},
        {S(  11,   27), S(  69, -111), S( 124,  -66), S(  77,   -5), S(   9,   26), S( -17,   33), S(  -1,   30), S(   0,    0)},
        {S(  13,  -20), S( 147, -210), S( 128, -108), S(  63,  -27), S(   6,   -8), S( -25,  -15), S( -28,  -10), S(   0,    0)}
    },
    {
        {S(   0,    0), S(   0,    0), S(  75,   71), S(  -3,   51), S(  -2,   59), S(   5,   74), S(  34,   58), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S( 149,   53), S( -29,   44), S( -15,   51), S( -23,   69), S(  -1,   51), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S( 147,   24), S(  17,   31), S(  -9,   52), S( -11,   61), S(  62,   20), S(   0,    0)},
        {S(   0,    0), S(   0,    0), S( 148,  -15), S(  14,    3), S( -21,    6), S( -10,    6), S( -20,  -37), S(   0,    0)}
    }
};
constexpr ScorePair PAWN_SHIELD[4][8] = {
    {S(  64,   58), S(   0,   75), S( -12,   63), S(  38,   56), S(  48,   45), S(  17,   36), S( -16,   47), S(   0,    0)},
    {S(  46,   38), S( -31,   39), S(   8,   39), S(  45,   30), S(  46,   15), S(   8,    3), S(  -8,  -31), S(   0,    0)},
    {S(  36,   40), S(  -3,   12), S(  15,   42), S(  50,   24), S(  46,   15), S(  22,    7), S( -57,   14), S(   0,    0)},
    {S(  15,  -10), S( -25,  -25), S(   7,  -32), S(  32,  -40), S(  26,  -40), S(  30,  -27), S( -29,  -21), S(   0,    0)}
};
constexpr ScorePair SAFE_KNIGHT_CHECK = S( 108,    3);
constexpr ScorePair SAFE_BISHOP_CHECK = S(  71,   28);
constexpr ScorePair SAFE_ROOK_CHECK = S( 116,   14);
constexpr ScorePair SAFE_QUEEN_CHECK = S(  69,   17);
constexpr ScorePair UNSAFE_KNIGHT_CHECK = S(  17,    1);
constexpr ScorePair UNSAFE_BISHOP_CHECK = S(  35,   11);
constexpr ScorePair UNSAFE_ROOK_CHECK = S(  44,    3);
constexpr ScorePair UNSAFE_QUEEN_CHECK = S(  21,    5);
constexpr ScorePair QUEENLESS_ATTACK = S(-155,  136);
constexpr ScorePair KING_ATTACKER_WEIGHT[4] = {S(  60,   -1), S(  24,    0), S(  28,  -13), S(   7,  -14)};
constexpr ScorePair KING_ATTACKS = S(   8,    0);
constexpr ScorePair WEAK_KING_RING = S(   5,    1);
constexpr ScorePair KING_FLANK_ATTACKS[2] = {S(  15,   -5), S(   3,    1)};
constexpr ScorePair KING_FLANK_DEFENSES[2] = {S(  -9,    0), S(  -8,    4)};
constexpr ScorePair SAFETY_OFFSET = S( 102,  221);

constexpr ScorePair MINOR_BEHIND_PAWN = S(   2,   13);
constexpr ScorePair KNIGHT_OUTPOST = S(  21,   21);
constexpr ScorePair BISHOP_PAWNS[7] = {S(  15,    5), S(   6,   16), S(   4,   12), S(   1,    5), S(  -4,   -1), S(  -8,  -11), S( -12,  -21)};
constexpr ScorePair BISHOP_PAIR = S(  27,   78);
constexpr ScorePair LONG_DIAG_BISHOP = S(  14,   14);
constexpr ScorePair ROOK_OPEN[2] = {S(  38,    0), S(  23,    2)};

constexpr ScorePair TEMPO = S(  35,   23);

constexpr ScorePair COMPLEXITY_PAWNS = S(   0,   13);
constexpr ScorePair COMPLEXITY_PAWNS_BOTH_SIDES = S(   0,  156);
constexpr ScorePair COMPLEXITY_PAWN_ENDGAME = S(   0,  177);
constexpr ScorePair COMPLEXITY_OFFSET = S(   0, -253);

#undef S
// clang-format on
