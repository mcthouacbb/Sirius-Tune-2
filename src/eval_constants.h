#include "sirius/defs.h"

#define S(mg, eg) {mg, eg}

constexpr PackedScore MATERIAL[6] = {S(  62,  129), S( 294,  424), S( 317,  434), S( 398,  771), S( 762, 1548), S(0, 0)};

constexpr PackedScore PSQT[6][64] = {
	{
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
		S(  53,   75), S(  31,   88), S(  32,   98), S(  62,   72), S(  70,   63), S(  42,   83), S(  31,  100), S(  56,   81), 
		S(  20,    4), S(  -3,   33), S(  18,   -6), S(  23,  -26), S(  12,  -22), S(   6,   -9), S( -19,   29), S(  -1,   13), 
		S(  15,    4), S(  -3,   11), S(  17,  -23), S(  14,  -27), S(   0,  -25), S(  -2,  -13), S( -10,   10), S( -11,    8), 
		S(   6,   -2), S(  -6,   15), S(  13,  -26), S(  17,  -19), S(  11,  -17), S(  -2,  -11), S( -16,   12), S( -14,   -1), 
		S(  -1,   -5), S(   8,    8), S(   4,   -3), S(   1,   -3), S(  -6,   -4), S( -10,   -7), S( -24,   11), S( -25,   -2), 
		S(   9,   -7), S(  23,    9), S(  33,  111), S(   9,   -1), S(  -3,   -8), S(  -6,   -7), S( -16,   14), S( -16,    1), 
		S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
	},
	{
		S( -78,  -92), S( -78,  -25), S( -31,  -17), S(   0,  -10), S( -35,    3), S( -61,    4), S(-106,    7), S( -95,  -50), 
		S( -17,  -12), S(  19,    1), S(  29,   -3), S(   5,    5), S(   5,   10), S(   3,   10), S(  -2,   15), S( -12,    1), 
		S(   7,   -5), S(   3,    2), S(  48,  -11), S(  32,    9), S(  18,   17), S(  17,   12), S(   5,    5), S(  -8,    2), 
		S(  28,    3), S(  27,   12), S(  43,   13), S(  27,   21), S(  26,   24), S(  32,   11), S(  20,    5), S(  10,   11), 
		S(  10,   15), S(  15,   15), S(  23,   16), S(  19,   27), S(  25,   18), S(  19,   17), S(  22,    2), S(   8,    4), 
		S(  16,   -3), S(  21,   -1), S(  20,   -2), S(  16,   14), S(   8,   13), S(   4,   -1), S(   5,   -6), S(  -8,   -6), 
		S(   8,   -1), S(  15,   -7), S(  10,   -5), S(  12,    0), S(   6,   -1), S(  -4,   -4), S(  -5,   -7), S( -17,   -7), 
		S(  -7,  -16), S( -10,   -9), S(  -1,  -11), S(   4,    1), S(  -2,   -2), S( -18,   -8), S( -13,  -13), S( -46,   -5), 
	},
	{
		S( -51,  -12), S( -35,    7), S( -11,   -3), S( -74,   11), S( -67,   16), S( -54,    4), S( -28,    6), S( -34,    5), 
		S( -21,   -7), S( -47,    6), S( -10,    2), S(  -3,   -1), S( -20,    9), S(   2,   -1), S( -14,   -6), S(  -4,   -6), 
		S(  13,   11), S(   8,    5), S(  28,    3), S(  10,    9), S(  19,    3), S(  -1,   -2), S(   9,    6), S(   4,    2), 
		S( -11,    6), S(   6,    9), S(   6,   14), S(  19,   17), S(  21,   21), S(  17,    8), S(   4,   11), S(  -8,    4), 
		S(  18,   -8), S(   2,    9), S(   9,    9), S(  12,   14), S(  21,   12), S(   1,   15), S(   1,    6), S(   1,   -1), 
		S(  21,  -11), S(  26,   -7), S(   7,   -6), S(  11,   10), S(   1,    7), S(   2,   -2), S(  16,    2), S(   2,   -7), 
		S(  28,  -21), S(  22,  -24), S(  27,   -9), S(   6,   -4), S(   0,   -1), S(  11,  -16), S(   3,  -25), S(  14,  -11), 
		S(  27,  -39), S(  17,  -15), S(  -8,   -1), S(  17,   -5), S(   1,   -3), S(   0,    1), S(  13,   -4), S(   4,  -17), 
	},
	{
		S(  16,    7), S( -24,   33), S(  -6,   22), S(  -9,   16), S( -26,   26), S( -21,   30), S(  -7,   21), S(  -3,   19), 
		S(  26,    3), S(  28,    8), S(  14,   15), S(   6,   13), S(  15,   17), S(   2,   28), S(  -2,   23), S(   0,   17), 
		S(  -3,    5), S(  29,    3), S(  13,    4), S(  20,    3), S(   2,   10), S(  -2,   19), S(   9,   14), S( -11,   17), 
		S(   1,    5), S(   0,   13), S(   8,    8), S(  10,    0), S(   2,    8), S(   6,   11), S(   4,   13), S(  -9,   14), 
		S( -10,    0), S(  12,    2), S( -10,    9), S(   7,    1), S(  -3,    2), S(  -8,    5), S( -10,    6), S( -12,    5), 
		S(   8,  -23), S(  24,  -25), S(   1,  -14), S(   5,  -17), S(  -8,  -11), S( -12,  -10), S( -10,  -11), S( -16,   -9), 
		S(  -8,  -26), S(  23,  -35), S(   5,  -22), S(   5,  -21), S(  -2,  -18), S(  -3,  -16), S( -12,  -14), S( -16,  -19), 
		S(  -7,  -38), S(  -4,  -17), S(   1,  -17), S(  10,  -24), S(   2,  -22), S(  -6,  -15), S(  -5,  -19), S(  -7,  -18), 
	},
	{
		S(  -4,   -3), S(  28,  -24), S( -30,   40), S( -21,   30), S(   3,    4), S( -31,   29), S( -45,   16), S( -33,   16), 
		S(  37,    7), S(  -7,   21), S( -14,   34), S( -38,   67), S( -26,   47), S(  -4,   13), S(  -2,   -7), S(   6,   -6), 
		S(   7,   17), S(  10,   11), S(  -3,   31), S( -14,   31), S(   0,   20), S(   6,   12), S(   6,   -9), S(  16,  -13), 
		S(   7,   18), S(   3,   31), S(   6,   18), S( -12,   38), S(  -9,   34), S(   9,    6), S(   9,    5), S(   7,   -3), 
		S(  11,    7), S(  14,   10), S(   0,   16), S(   4,   26), S(  -5,   33), S(  -1,   16), S(   5,   11), S(   5,   -6), 
		S(  16,  -23), S(  17,  -13), S(   7,   -1), S(  -4,   11), S(  -1,    6), S(   1,    5), S(  13,  -18), S(  13,  -28), 
		S(  10,  -51), S(  14,  -68), S(  11,  -39), S(  10,  -22), S(   7,  -13), S(   8,  -27), S(   8,  -33), S(  13,  -49), 
		S(  14,  -58), S( -11,  -50), S( -13,  -32), S(   0,  -29), S(   1,  -28), S(  -4,  -22), S(  -8,  -25), S(  -8,  -24), 
	},
	{
		S( -27,  -56), S( -31,    7), S( -90,   -1), S(-101,   19), S(   6,   -5), S(   6,   -5), S(   6,   -5), S(   6,   -5), 
		S( -56,   29), S(  -2,   55), S( -25,   39), S( -15,   36), S(   6,   -5), S(   6,   -5), S(   6,   -5), S(   6,   -5), 
		S(  31,   13), S(  63,   42), S(  50,   30), S(   0,   51), S(   6,   -5), S(   6,   -5), S(   6,   -5), S(   6,   -5), 
		S( -12,   12), S(  16,   37), S(   1,   26), S( -43,   42), S(   6,   -5), S(   6,   -5), S(   6,   -5), S(   6,   -5), 
		S( -37,    2), S( -10,   24), S(  -3,    6), S( -41,   25), S(   6,   -5), S(   6,   -5), S(   6,   -5), S(   6,   -5), 
		S(  -2,  -15), S(  20,    3), S(   0,  -12), S( -21,    7), S(   6,   -5), S(   6,   -5), S(   6,   -5), S(   6,   -5), 
		S(  30,  -28), S(  33,   -8), S(   8,  -22), S( -19,   -7), S(   6,   -5), S(   6,   -5), S(   6,   -5), S(   6,   -5), 
		S(  20,  -56), S(  24,  -20), S(  -4,  -34), S( -11,  -30), S(   6,   -5), S(   6,   -5), S(   6,   -5), S(   6,   -5), 
	},
};

constexpr PackedScore MOBILITY[4][28] = {
	{S( -15,  -26), S( -39,  -46), S( -17,  -16), S(  -9,    0), S(   2,    8), S(   7,   17), S(  15,   20), S(  23,   24), S(  34,   16), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -23,  -42), S( -35,  -58), S( -22,  -29), S( -14,  -11), S(  -5,   -3), S(   1,    7), S(   3,   15), S(   7,   18), S(   8,   21), S(  11,   21), S(  12,   21), S(  18,   15), S(  18,   21), S(  23,    1), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -26,  -43), S( -32,  -68), S( -17,  -48), S(  -5,  -27), S(  -2,  -13), S(  -3,   -3), S(  -3,    5), S(   1,   10), S(   3,   12), S(   8,   17), S(   7,   26), S(   9,   32), S(  13,   35), S(  19,   34), S(  29,   31), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0)},
	{S( -23,    7), S( -57,  -78), S( -79, -131), S( -18, -216), S( -21,  -72), S( -14,  -16), S(  -5,  -27), S(  -3,   -5), S(  -2,   13), S(   0,   23), S(   2,   27), S(   6,   29), S(   6,   41), S(   9,   40), S(  10,   46), S(  11,   48), S(  12,   51), S(  14,   53), S(  13,   53), S(  19,   47), S(  25,   37), S(  34,   19), S(  30,   26), S(  40,    5), S(  42,    2), S(  22,   -1), S(  22,  -19), S( -72,    4)}
};

constexpr PackedScore THREAT_BY_PAWN[6] = {S(   5,  -19), S(  66,   27), S(  61,   57), S(  77,   26), S(  73,   -3), S(   0,    0)};
constexpr PackedScore THREAT_BY_KNIGHT[2][6] = {
	{S(   7,   28), S(  18,   38), S(  41,   42), S(  74,   14), S(  58,  -32), S(   0,    0)},
	{S(  -7,    8), S(   7,   38), S(  28,   29), S(  64,   32), S(  58,   -5), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_BISHOP[2][6] = {
	{S(  -2,   34), S(  40,   31), S( -10,   33), S(  69,   13), S(  69,   52), S(   0,    0)},
	{S(  -3,    5), S(  18,   22), S( -24,  -13), S(  44,   43), S(  45,  118), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_ROOK[2][6] = {
	{S(   0,   41), S(  17,   58), S(  27,   54), S(  10,  -41), S(  75,    9), S(   0,    0)},
	{S(  -7,    7), S(   2,   15), S(  13,    2), S(   8,  -81), S(  65,   41), S(   0,    0)}
};
constexpr PackedScore THREAT_BY_QUEEN[2][6] = {
	{S(   6,    8), S(  24,   19), S(   9,   48), S(  18,   18), S(  11,  -54), S(  97,   52)},
	{S(  -3,   12), S(   0,    4), S(  -7,   15), S(  -5,    2), S( -17,  -74), S( 125,   42)}
};
constexpr PackedScore THREAT_BY_KING[6] = {S( -25,   46), S(   7,   49), S(  30,   40), S(  86,    7), S(   0,    0), S(   0,    0)};
constexpr PackedScore PUSH_THREAT = S(  14,   18);

constexpr PackedScore ISOLATED_PAWN[8] = {S(  -9,    6), S(  -3,  -15), S( -12,   -8), S( -10,  -16), S( -12,  -15), S(  -8,   -7), S(  -3,  -13), S( -12,    6)};
constexpr PackedScore DOUBLED_PAWN[8] = {S(   1,  -60), S(  15,  -37), S(   1,  -28), S(   0,  -19), S(  -4,  -13), S(  -5,  -20), S(   9,  -40), S(   9,  -73)};
constexpr PackedScore BACKWARDS_PAWN[8] = {S(   0,    0), S(  -8,  -13), S(  -2,  -13), S(  -9,  -11), S(  -1,  -15), S(  28,    0), S(   0,    0), S(   0,    0)};
constexpr PackedScore PAWN_PHALANX[8] = {S(   0,    0), S(   5,   -3), S(  11,   -2), S(  20,    7), S(  42,   40), S( 113,  212), S( -12,  353), S(   0,    0)};
constexpr PackedScore DEFENDED_PAWN[8] = {S(   0,    0), S(   0,    0), S(  19,    7), S(  11,    7), S(  17,   20), S(  31,   60), S( 137,   71), S(   0,    0)};
constexpr PackedScore CANDIDATE_PASSER[2][8] = {
	{S(   0,    0), S( -35,  -16), S( -19,   -7), S(   0,   26), S(  28,   52), S(  62,   87), S(   0,    0), S(   0,    0)},
	{S(   0,    0), S( -21,   -7), S( -10,   14), S(  -4,   28), S(  19,   41), S(  32,  150), S(   0,    0), S(   0,    0)}
};

constexpr PackedScore PASSED_PAWN[2][2][8] = {
	{
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -40,  -40), S( -16,   24), S(   2,  150), S(  55,  222), S(   0,    0)},
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -28,  -53), S(   6,  -23), S(  32,   20), S(  62,   28), S(   0,    0)}
	},
	{
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -32,  -56), S(   0,  -24), S(  38,    9), S(  66,   -3), S(   0,    0)},
		{S(   0,    0), S(   0,    0), S(   0,    0), S( -33,  -61), S(   0,  -35), S(  13,  -11), S( -19,  -10), S(   0,    0)}
	}
};
constexpr PackedScore OUR_PASSER_PROXIMITY[8] = {S(   0,    0), S(  50,   83), S(  15,   67), S(   3,   43), S(   4,   31), S(  10,   23), S(  18,   20), S(  13,   19)};
constexpr PackedScore THEIR_PASSER_PROXIMITY[8] = {S(   0,    0), S( -63,    7), S(  18,    0), S(  17,   26), S(  22,   46), S(  18,   78), S(  22,   78), S(  23,   68)};

constexpr PackedScore PAWN_STORM[2][4][8] = {
	{
		{S(  33,   56), S(-116,  -55), S( -32,   26), S(  28,   24), S(  15,   38), S(  -5,   46), S( -13,   47), S(   0,    0)},
		{S(  27,   30), S(  48, -145), S(  85,  -38), S(  43,   10), S(  16,   19), S( -23,   29), S(  -2,   29), S(   0,    0)},
		{S(  10,   47), S( 110, -102), S( 105,   -2), S(  57,   26), S(  15,   41), S( -11,   48), S( -20,   53), S(   0,    0)},
		{S(  13,   26), S( 158,  -73), S( 100,   -2), S(  43,   32), S(   0,   39), S( -21,   32), S( -29,   44), S(   0,    0)}
	},
	{
		{S(   0,    0), S(   0,    0), S(  15,   62), S( -29,   40), S(  -6,   44), S(  17,   47), S( -12,   46), S(   0,    0)},
		{S(   0,    0), S(   0,    0), S(  93,   18), S(   5,   24), S(  -3,   36), S(   0,   35), S(  -1,   28), S(   0,    0)},
		{S(   0,    0), S(   0,    0), S(  84,   30), S(   3,   34), S(   6,   48), S(  25,   49), S(  -4,   50), S(   0,    0)},
		{S(   0,    0), S(   0,    0), S(  38,   20), S(  21,   39), S( -25,   36), S(  -7,   31), S(  -5,   35), S(   0,    0)}
	}
};
constexpr PackedScore PAWN_SHIELD[4][8] = {
	{S(  40,   52), S( -16,   70), S( -21,   62), S(  15,   56), S(  25,   47), S( -25,    9), S( -80,  -11), S(   0,    0)},
	{S(  49,   28), S( -21,   41), S(  -1,   30), S(  32,   25), S(  30,   13), S(   3,   -3), S( -34,  -22), S(   0,    0)},
	{S(  16,   26), S(  14,  157), S(   0,   26), S(  13,    2), S(  14,    0), S(   2,   -9), S( -47,  -17), S(   0,    0)},
	{S(  17,   40), S(   8,   35), S(  -9,   38), S(  11,   33), S(  21,   30), S(  16,   29), S( -73,   30), S(   0,    0)}
};
constexpr PackedScore SAFE_KNIGHT_CHECK = S( 108,    9);
constexpr PackedScore SAFE_BISHOP_CHECK = S(  56,   22);
constexpr PackedScore SAFE_ROOK_CHECK = S( 101,   23);
constexpr PackedScore SAFE_QUEEN_CHECK = S(  51,   29);
constexpr PackedScore UNSAFE_KNIGHT_CHECK = S(  17,    3);
constexpr PackedScore UNSAFE_BISHOP_CHECK = S(  39,   12);
constexpr PackedScore UNSAFE_ROOK_CHECK = S(  42,    2);
constexpr PackedScore UNSAFE_QUEEN_CHECK = S(  19,    0);
constexpr PackedScore QUEENLESS_ATTACK = S(-176,  131);
constexpr PackedScore KING_ATTACKER_WEIGHT[4] = {S(  56,   -5), S(  29,   -2), S(  30,  -14), S(  10,  -15)};
constexpr PackedScore KING_ATTACKS = S(  10,   -2);
constexpr PackedScore WEAK_KING_RING = S(  13,   -1);

constexpr PackedScore MINOR_BEHIND_PAWN = S(   6,   12);
constexpr PackedScore KNIGHT_OUTPOST = S(  23,   15);
constexpr PackedScore BISHOP_PAWNS[7] = {S(   4,   19), S(   6,   18), S(   4,   11), S(   1,    4), S(  -3,   -5), S(  -3,  -18), S(  -8,  -29)};
constexpr PackedScore BISHOP_PAIR = S(  20,   59);
constexpr PackedScore LONG_DIAG_BISHOP = S(  16,    8);
constexpr PackedScore ROOK_OPEN[2] = {S(  25,    4), S(  13,    4)};

constexpr PackedScore TEMPO = S(  32,   33);

constexpr PackedScore COMPLEXITY_PAWNS = S(   0,    9);
constexpr PackedScore COMPLEXITY_PASSERS = S(   0,   -1);
constexpr PackedScore COMPLEXITY_PAWNS_BOTH_SIDES = S(   0,   65);
constexpr PackedScore COMPLEXITY_PAWN_ENDGAME = S(   0,   77);
constexpr PackedScore COMPLEXITY_OFFSET = S(   0, -124);

#undef S
